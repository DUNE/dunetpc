#include "services_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::dune35t_services
}
#source is now a root file
source:
{
  module_type: SplitterInput
  maxEvents:  300        # Number of events to create
  posttriggerticks: 6400
  pretriggerticks:  0

  novatickspertpctick: 0.5 
  TimeStampThreshold:  5.

  MCTrigLevel:  33000
  whichTrigger: 0 #0 == use time, #1 == photon detectors, #2 == muon counters, #3 == tickler trigger (tpc information)

  ADCdiffThreshold:  40
  ADCsOverThreshold: 1000

  TPCInputDataProduct:  "raw::RawDigit"
  TPCInputTag:  "daq::Detsim"
  
  SSPInputDataProduct:  "raw::OpDetWaveform"
  SSPInputTag:  "opdigi::Detsim" 

  PennInputDataProduct: "raw::ExternalTrigger"
  PennInputTag: "simcounter::Detsim" 
#### If the Penn stuff isn't in the data record.... ####
  #PennInputDataProduct:  "raw::RawDigit"
  #PennInputTag:  "daq::Detsim"

  NOvAClockFrequency : 64.0 # MHz
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  rns:                 { module_type: RandomNumberSaver }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_splitter_nearline.root"
   dataTier:    "nearline"
   compressionLevel: 1
 }
}

source.TPCInputDataProduct: "raw::RawDigit"
source.TPCInputTag: "daq::Detsim"

