#include "services_dune.fcl"
#include "hitfindermodules_dune.fcl"

process_name: Nearline

services:
{
  # Load the service that manages root files for histograms.
  TimeTracker:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::dune35t_services
  TFileService: { fileName: "nearline_hists_mc.root" }
  message:      @local::dune_message_services_prod_debug  

}
#source is now a root file
source:
{
  module_type: RootInput
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  rns:                { module_type: RandomNumberSaver }
  fasthit:            @local::dune35t_fasthitfinder      
 }

 analyzers:
 {
  nearlineana:{
   module_type: NearlineAna
  }
 }
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 nearline: [  rns, fasthit ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ nearlineana, out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [nearline] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_nearline.root"
   dataTier:    "nearline"
   compressionLevel: 1
 }
}

physics.analyzers.nearlineana.RawDigitsTag: "tpcdaqtooffline:offline"  
physics.analyzers.nearlineana.UseOnlineChannels: true
physics.analyzers.nearlineana.TPCChannelMapFile: "rce_channel_map_dune35t.txt"

physics.analyzers.nearlineana.MakePedestalPerEventPlots: true
#physics.analyzers.nearlineana.PedestalPerEventChannels: [ 0, 1164 ]
physics.analyzers.nearlineana.PedestalPerEventChannels: [ 0, 128, 256, 384, 512, 640, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920 ]
physics.analyzers.nearlineana.WritePedestalPerEventFile: true
physics.analyzers.nearlineana.PedestalPerEventFileName: "PedestalPerEventTest.txt"

physics.analyzers.nearlineana.MakePedestalPerTickPlots: true
physics.analyzers.nearlineana.PedestalPerTickChannels: [ 0, 128, 256, 384, 512, 640, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920 ]
physics.analyzers.nearlineana.WritePedestalPerTickFile: true
physics.analyzers.nearlineana.PedestalPerTickFileName: "PedestalPerTickTest.txt"
