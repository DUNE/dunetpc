////////////////////////////////////////////////////////////////////////
// Class:       TPCHits
// Module Type: analyzer
// File:        TPCHits_module.cc
//
// Generated at Wed Nov 18 16:12:15 2015 by Jonathan Davies using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

//larsoft
#include "RecoBase/Hit.h"


namespace nearline {
  class TPCHits;
}

class nearline::TPCHits : public art::EDAnalyzer {
public:
  explicit TPCHits(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TPCHits(TPCHits const &) = delete;
  TPCHits(TPCHits &&) = delete;
  TPCHits & operator = (TPCHits const &) = delete;
  TPCHits & operator = (TPCHits &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;
  void reconfigure(fhicl::ParameterSet const & p);

private:
  art::InputTag fTPCHitTag;
  // Declare member data here.

};


nearline::TPCHits::TPCHits(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  reconfigure(p);
}

void nearline::TPCHits::reconfigure(fhicl::ParameterSet const & p ){
  
  fTPCHitTag = p.get<art::InputTag>("TPCHitTag", "a:b:c");
  
  mf::LogInfo("TPCHits") << "===================================="   << "\n"
                         << "Parameter Set"                          << "\n"
                         << "===================================="   << "\n"
                         << "fTPCHitTag:        " << fTPCHitTag      << "\n"
                         << "===================================="   << "\n";
}

void nearline::TPCHits::analyze(art::Event const & e)
{
 
  art::Handle<std::vector<recob::Hit>> hitHandle;
  bool retVal = e.getByLabel(fTPCHitTag, hitHandle);
  if(retVal==true) 
    mf::LogInfo("TPCHits") << "GetByLabel SUCCESS: " << fTPCHitTag << std::endl;
  else{ 
    mf::LogWarning("TPCHits") << "GetByLabel FAIL: " << fTPCHitTag << std::endl;
    return;
  }
  //  art::Ptr<std::vector<recob::Hits> 


  // Implementation of required member function here.
}

DEFINE_ART_MODULE(nearline::TPCHits)
