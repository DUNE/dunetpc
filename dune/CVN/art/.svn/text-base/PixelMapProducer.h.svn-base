////////////////////////////////////////////////////////////////////////
/// \file    PixelMapProducer.h
/// \brief   PixelMapProducer for CVN
/// \author  Dominick Rocco - rocco@physics.umn.edu
////////////////////////////////////////////////////////////////////////

#ifndef CVN_PIXELMAPPRODUCER_H
#define CVN_PIXELMAPPRODUCER_H


#include <array>
#include <vector>

#include "CVN/func/PixelMap.h"
#include "CVN/func/Boundary.h"
#include "RecoBase/Cluster.h"
//#include "art/Framework/Services/Registry/ServiceHandle.h"
//#include "Geometry/Geometry.h"

namespace cvn
{
  /// Producer algorithm for PixelMap, input to CVN neural net
  class PixelMapProducer
  {
  public:
    PixelMapProducer(unsigned int nPlane, unsigned int nCell,
                     unsigned int maxPlaneGap, bool useGeV);


    /// Find vertex plane by requiring gaps are not wider than maxGap
    unsigned int FindVertexMaxGap(const rb::Cluster& cluster);

    /// Find vertex plane by requiring gaps are not wider than maxGap
    unsigned int FindVertexWindowThreshold(const rb::Cluster& cluster);

    /// Find center cell based on mean of hits in each view (2 views)
    std::array<unsigned int, 2> FindCenterMedian(
                              const rb::Cluster& cluster,
                              unsigned int firstPlane);


    /// Get boundaries for pixel map representation of cluster
    Boundary DefineBoundary(const rb::Cluster& cluster);

    /// Check the boundaries for consistency with NPlane and NCell,
    /// assert if inconsistent.
    void CheckBoundary(const Boundary& bound);


    /// Determine plane is within plane rcvne of a PixelMap
    bool InPlaneRcvne(unsigned int plane, unsigned int firstPlane);

    /// Determine whether cell is within cell rcvne based on meanCell
    bool InCellRcvne(unsigned int cell, float meanCell);

    unsigned int NPlane() const {return fNPlane;};
    unsigned int NCell() const {return fNCell;};

    PixelMap CreateMap(const rb::Cluster& slice);

    PixelMap CreateMapGivenBoundary(const rb::Cluster& cluster,
                                    const Boundary& bound);


   private:
    unsigned int      fNPlane;  ///< Number of planes, length for pixel maps
    unsigned int      fNCell;   ///< Number of cells, width of pixel map

    /// Maximum gap in planes at front of cluster to prevent pruning of upstream
    /// hits
    unsigned int      fMaxPlaneGap;
    bool              fUseGeV;

  };

}

#endif  // CVN_PIXELMAPPRODUCER_H
