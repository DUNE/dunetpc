#include "services.fcl"
#include "BackTracker.fcl"
#include "CVNEvaluator.fcl"
#include "CAFMaker.fcl"
#include "CVNMapper.fcl"

process_name: cvnevaluator

services:
{
  # Load the service that manages root files for histograms.
  TimeTracker:{}
  user: @local::standard_services
}
services.BackTracker: @local::standard_backtracker

# Input source is a ROOT file 
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}

outputs:
{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  # Declare the modules
  producers:
  { 
    cvnmap: @local::standard_cvnmapper
    cvneval: @local::standard_cvnevaluator
    #cvnnumueval: @local::standard_cvnevaluator
    #cvnnceval: @local::standard_cvnevaluator
    #cvnnueeval: @local::standard_cvnevaluator
    cafmaker: @local::standard_cafmaker
  }

  # Build the paths
  map: [cvnmap, cvneval,
        #cvnnumueval, cvnnceval, cvnnueeval,
        cafmaker]

}

physics.producers.cvnmap.ObeyPreselection: false
physics.producers.cvneval.ObeyPreselection: false

physics.producers.cvneval.CaffeNetHandler.DeployProto:"siamese_compact_deploy.prototxt"
physics.producers.cvneval.CaffeNetHandler.ModelFile:"googlenet_view_compact_iter_330000.caffemodel"

physics.producers.cvnmap.UseGeV: true
physics.producers.cvneval.CaffeNetHandler.UseGeV: true



########################################################################
