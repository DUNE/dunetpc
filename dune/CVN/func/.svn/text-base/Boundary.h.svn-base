////////////////////////////////////////////////////////////////////////
/// \file    Boundary.h
/// \brief   Boundary for CVN PixelMap
/// \author  Dominick Rocco - rocco@physics.umn.edu
////////////////////////////////////////////////////////////////////////

#ifndef CVN_BOUNDARY_H
#define CVN_BOUNDARY_H

#include <ostream>
#include <vector>






namespace cvn
{


  /// Boundary object intended for use with cvn::PixelMap.  Stores first and
  /// last planes, as well as first and last cell for even and odd view.
  /// CVN doesn't carefully define X/Y view, but instead simply uses
  /// odd/even plane (plane%2) as a proxy.
  class Boundary
  {

  public:
    /// Create new Boundary object based on number of planes, number of cells,
    /// minumum plane and mean cell in odd and even view.
    Boundary(const int& nPlane, const int& nCell,
             const int& minPlane,
             const int& centerCellEven,
             const int& centerCellOdd);

    Boundary(){};

    bool IsWithin(const unsigned int& plane, const unsigned int& cell);

    int FirstPlane() const {return fFirstPlane;};
    int LastPlane() const {return fLastPlane;};
    int FirstCell(const unsigned int& view) const {return fFirstCell[view];};
    int LastCell (const unsigned int& view) const {return fLastCell[view];};



  private:
    int fFirstPlane;  ///< Minimum plane, inclusive
    int fLastPlane;   ///< Maximum plane, inclusive
    int fFirstCell[2]; ///< Minimum cell in each view, inclusive
    int fLastCell[2];  ///< Maximum cell in each view, inclusive


  };

  std::ostream& operator<<(std::ostream& os, const Boundary& b);
}

#endif  // CVN_BOUNDARY_H