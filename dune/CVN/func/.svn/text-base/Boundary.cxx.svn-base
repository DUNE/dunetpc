////////////////////////////////////////////////////////////////////////
/// \file    Boundary.cxx
/// \brief   Boundary for CVN PixelMap
/// \author  Dominick Rocco - rocco@physics.umn.edu
////////////////////////////////////////////////////////////////////////

#include  <iostream>
#include  <ostream>
#include  <utility>
#include  <cassert>


#include "CVN/func/Boundary.h"

namespace cvn
{

  Boundary::Boundary(const int& nPlane,
                     const int& nCell,
                     const int& minPlane,
                     const int& centerCellEven,
                     const int& centerCellOdd):
  fFirstPlane(minPlane),
  fLastPlane (minPlane + nPlane - 1),
  fFirstCell{centerCellEven - nCell / 2,   // For odd nCell, we will truncate 0.5,
             centerCellOdd  - nCell / 2},  // but get it back in LastCell
  fLastCell{centerCellEven + nCell / 2 + nCell % 2 - 1,// Recover the trucated 0.5
            centerCellOdd + nCell / 2 + nCell % 2 - 1 }// with nCell % 2

  {
    assert(fLastPlane - fFirstPlane == nPlane - 1);
    assert(fLastCell[0] - fFirstCell[0] == nCell - 1);
    assert(fLastCell[1] - fFirstCell[1] == nCell - 1);

  }



  bool Boundary::IsWithin(const unsigned int& plane, const unsigned int& cell)
  {
    unsigned int view = plane % 2;
    bool inPlaneRcvne = (int) plane >= fFirstPlane && (int) plane <= fLastPlane;
    bool inCellRcvne = (int) cell >= fFirstCell[view] &&
                       (int) cell <= fLastCell[view];
    return inPlaneRcvne && inCellRcvne;
  }


  std::ostream& operator<<(std::ostream& os, const Boundary& b)
  {
    os<<"Boundary with "
      <<"(first,last) plane: (" << b.FirstPlane()<<", "<< b.LastPlane()
      <<"), (first,last) cell even: ("<<b.FirstCell(0)<<", "<<b.LastCell(0)<<")"
      <<"), (first,last) cell odd: ("<<b.FirstCell(1)<<", "<<b.LastCell(1)<<")";

    return os;
  }
}
