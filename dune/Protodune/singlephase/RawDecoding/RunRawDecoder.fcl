#include "services_dune.fcl"

#This is the default configuration file
#include "RawDecoder.fcl"

services:
{
  #message:              @local::dune_message_services_prod_debug
  TFileService: { 
   closeFileFast: true  # default

#   fileName:  "/scratch/OMoutput/np04_hist_run%06r_%#.root"
   fileName:  "RunRawDecoderTFile.root"

   tmpDir: "<parent-path-of-filename>"  # default

 #  fileProperties: {
 #
 #    maxEvents: 100
 #
 #    maxSubRuns: 4294967295  # default
 #
 #    maxRuns: 4294967295  # default
 #
 #    maxInputFiles: 4294967295  # default
 #
 #    ## Maximum size of file (in KiB)
 #
 #    maxSize: 2130706432  # default
 #
 #    ## Maximum age of output file (in seconds)
 #
 #    maxAge: 4294967295  # default
 #
 #    ## The 'granularity' parameter specifies the level at which
 #    ## an output file may be closed, and thereby the granularity
 #    ## of the file.  The following values are possible:
 #    ##
 #    ##     Value        Meaning
 #    ##    =======================================================
 #    ##    "Event"       Allow file switch at next Event
 #    ##    "SubRun"      Allow file switch at next SubRun
 #    ##    "Run"         Allow file switch at next Run
 #    ##    "InputFile"   Allow file switch at next InputFile
 #    ##    "Job"         File closes at the end of Job
 #    ##
 #    ## For example, if a granularity of "SubRun" is specified, but the
 #    ## output-module has reached the maximum events written to disk (as
 #    ## specified by the 'maxEvents' parameter), the output module will NOT
 #    ## switch to a new file until a new SubRun has been reached (or
 #    ## there are no more Events/SubRuns/Runs to process).
 #
 #    granularity: "Event"  # default
 #  }

  }

  PdspChannelMapService: {
    FileName:         "protoDUNETPCChannelMap_v2.txt"
    LogLevel:         1
  }
}

 physics:
{
  producers:
  {

    timingrawdecoder: @local::timing_raw_decoder   
    ssprawdecoder: @local::ssp_raw_decoder  
    rcerawdecoder: @local::rce_raw_decoder 
    felixrawdecoder: @local::felix_raw_decoder
  }

  #Create path to run module
  produce: [ timingrawdecoder, ssprawdecoder, rcerawdecoder, felixrawdecoder ] 
  #produce: [ timingrawdecoder, rcerawdecoder, felixrawdecoder ] 
  output: [ out1 ]
  trigger_paths : [ produce ]
  end_paths: [ output ]
}

#services: {
#}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName: "RawDecoder.root"
  }

}

source:
{
  module_type: RootInput
  fileNames: [ "/afs/cern.ch/user/s/sergiand/workspace/artdaq_devel/pdune_r1000077_sr01_20170629T181646_1_0.root" ]
  maxEvents : -1
}

process_name: RunRawDecoder
 
