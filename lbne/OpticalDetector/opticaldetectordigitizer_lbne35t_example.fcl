#include "services_lbne.fcl"
#include "opticaldetectormodules_lbne.fcl"
#include "opticaldetectorservices_lbne.fcl"


process_name: OpticalDigitization

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "opticaldetectordigitizer_lbne35t_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::lbne35t_simulation_services
  message:      @local::standard_info
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  #specify from command line with -s or --source
   
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
   
   producers:
   {
      opdigi:    # simple digitizer with no noise and high saturation
      {
        module_type:  "OpDetDigitizerLBNE"
        InputModule:  "largeant" # Module that created OpDetPulses (OpticalRawDigits)
        QE:           0.16       # Quantum efficiency of photon detectors
        SampleFreq:   0.15       # Sampling frequency in GHz
        TimeBegin:    0.0        # Readout window begin in ns
        TimeEnd:      1600000.0  # Readout window end in ns
        VoltageToADC: 10.0       # Converting mV to ADC counts (counts in 1 mV)
      } 
      rns:       { module_type: "RandomNumberSaver" }
   }

   analyzers:
   {
      pmtresponse: @local::lbne35t_simphotoncounter
      opdigiana: 
      {
        module_type:  "OpDetDigiAnaLBNE"
        InputModule:  "opdigi"  # Module that created OpDetPulses (OpticalRawDigits)
        SampleFreq:   0.15      # Sampling frequency in GHz
        TimeBegin:    0.0       # Readout window begin in ns
        TimeEnd:      1600000.0 # Readout window end in ns
      } 
   }
   
   
   #define the producer and filter modules for this path, order matters, 
   #filters reject all following items.  see lines starting physics.producers below
   simulate: [ opdigi, rns ] 
   analyzeIt:  [ pmtresponse, opdigiana ]
   
   #define the output stream, there could be more than one if using filters 
   stream1:  [ out1 ]
   
   #trigger_paths is a keyword and contains the paths that modify the art::event, 
   #ie filters and producers
   trigger_paths: [ simulate ] 
   
   #end_paths is a keyword and contains the paths that do not modify the art::Event, 
   #ie analyzers and output streams.  these all run simultaneously
   end_paths:     [ analyzeIt, stream1 ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
   out1:
   {
      module_type: RootOutput
      fileName:    "opticaldetectordigitizer_lbne35t_gen.root"
      #default file name, can override from command line with -o or --output
      dataTier:    "simulated"
      compressionLevel: 1
   }
}


