#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_dune.root" }
  TimeTracker:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:                 @local::dunefddphase_simulation_services

}

services.user.Geometry: @local::dunedphase10kt_workspace_geo

# map over detsim services
services.ChannelNoiseService:     @local::chnoiseold
services.DetPedestalService:     @local::peddplegacy
services.PedestalAdditionService: @local::padprovided
services.AdcSuppressService:      @local::zsonline
services.AdcCompressService:      @local::cmpreplace
services.AdcDistortService:       @local::stuckbits


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::dunefd_singlep
   largeant:  @local::dunefd_largeant
   daq:       @local::dune_detsim
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, largeant, daq ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

# set particle gun
physics.producers.generator.PDG: [ 13 ]
physics.producers.generator.P0:  [ 60.0 ]
physics.producers.generator.Theta0XZ: [0.0]
physics.producers.generator.Theta0YZ: [0.0]
physics.producers.generator.X0: [0.0]
physics.producers.generator.Y0: [0.0]
physics.producers.generator.Z0: [0.0] 

#physics.producers.daq.PedestalOn: true
#physics.producers.daq.NoiseOn: true

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_dunefd.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
