#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_dune35t.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_protoDUNE_hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_services
			@table::protodune_simulation_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: 10000
  fileNames: ["detsim_single_protoDUNE.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  rns:                 { module_type: RandomNumberSaver }
# convert raw::RawDigit to recob::wire
  caldata:            @local::dunefd_calwire
# cheater reconstruction
  hitcheat:           @local::dunefd_hitcheater
  clustercheat:       @local::dunefd_clustercheater
  trackcheat:         @local::dunefd_trackcheater
# actual hit finder
  gaushit:            @local::dunefd_gaushitfinder
  fasthit:            @local::dunefd_fasthitfinder
  cchit:              @local::dunefd_clustercrawlerhit
# disambiguation cheater that removes duplicate hits
  dcheat:             @local::dunefd_disambigcheat
  fasthitdc:          @local::dunefd_disambigcheat
#  dcheatcc:           @local::dune35t_disambigcheat
# reconstruction using gaushit and disambiguration cheater
#  fuzzydc:            @local::dune35t_fuzzycluster
  dbclusterdc:        @local::dunefd_dbcluster
  lineclusterdc:      @local::dunefd_linecluster
  costrkdc:           @local::dunefd_cosmictracker
  #stitchdc:           @local::dune35t_trackstitcher
  calodc:             @local::dune35t_calomc
  pandoradc:          @local::dune35t_pandora
  particlestitcherdc: @local::dune35t_particlestitcher
  pandoracalodc:      @local::dune35t_calomc
  pmtrackdc:           @local::dune35t_pmalgtrackmaker
  pmtrackcalodc:       @local::dune35t_calomc
# actual disambiguation
  hitfd:             @local::dunefd_hitfinderfd
#  hit35tcc:           @local::dune35t_hitfinder35t
# reconstruction using disambiguated hits
#  fuzzy:              @local::dune35t_fuzzycluster
  dbcluster:          @local::dune35t_dbcluster
  linecluster:        @local::dune35t_linecluster
  costrk:             @local::dune35t_cosmictracker
#  stitch:             @local::dune35t_trackstitcher
  calo:               @local::dune35t_calomc
  pandora:            @local::dune35t_pandora
  particlestitcher:   @local::dune35t_particlestitcher
  pandoracalo:        @local::dune35t_calomc
  pmtrack:             @local::dune35t_pmalgtrackmaker
  pmtrackcalo:         @local::dune35t_calomc
#  kalmanhit:         @local::dune35t_track3Dkalmanhit
  mctrutht0:          @local::dune35t_mctrutht0matching
  mctrutht0dc:        @local::dune35t_mctrutht0matching
  mctrutht0pandora:   @local::dune35t_mctrutht0matching
  mctrutht0pandoradc: @local::dune35t_mctrutht0matching
  mctrutht0pmtrack:    @local::dune35t_mctrutht0matching
  mctrutht0pmtrackdc:  @local::dune35t_mctrutht0matching
  t0counter:          @local::dune35t_t0counter
# photon detector reconstruction
  ophit:              @local::dune35t_ophit 
  opflash:            @local::dune35t_opflash 
      
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns, 
         #optical hits flashes
         ophit, opflash,
         #counter, TPC wire signals      
#        t0counter, caldata, 
         caldata,
         #cheater reco
         hitcheat, clustercheat, trackcheat,
         #hit reco with cheated disambiguation
         gaushit, dcheat, cchit, fasthit, fasthitdc,
         #cluster reco with cheated disambiguation
         dbclusterdc, lineclusterdc,
         #3D reco with cheated disambiguation
#         costrkdc, mctrutht0dc, calodc, 
         costrkdc,
#         #pandora with cheated disambiguation
#         pandoradc, particlestitcherdc, mctrutht0pandoradc, pandoracalodc,
         #pmatrack with cheated disambiguation
#         pmtrackdc, mctrutht0pmtrackdc, pmtrackcalodc,
         pmtrackdc,
         #real disambiguation
         hitfd,
#         #cluster reco
         dbcluster, linecluster,
         #3D reco
#         costrk,  mctrutht0, calo,
         costrk,
#         #pandora
#         pandora, particlestitcher, mctrutht0pandora, pandoracalo,
         #pmatrack
#         pmtrack, mctrutht0pmtrack, pmtrackcalo
         pmtrack
         ]

 analyzers:
 {
   pmtresponse: @local::dunefd_simphotoncounter
   # This name defines a job step below, and will appear as a directory 
   # in the output histogram file. 
   AnalysisExample: 
   {
      # The "module_type" tells us which module to run. The name here
      # matches the name supplied to DEFINE_ART_MODULE near the end of
      # AnalysisExample_module.cc.

      module_type:     "AnalysisExample"

      # The input parameters for our AnalysisExample module. Compare
      # the names you see here with the reconfigure method in
      # AnalysisExample.cxx. You will want to add/remove/rename the
      # example parameters below to suit your task.

      # If you are reading any objects created by the simulation, then
      # don't change the value of this parameter. This is the name of
      # the 'producer' that ran the simulation module in a previous
      # job. An example of a job file that runs the simulation is
      # ${LARSIM_DIR}/job/prodsingle.fcl; look for "largeant:". It's
      # unlikely that anyone would change the name of this producer.

      SimulationLabel: "largeant"

      # Hits can be created by more than one module in
      # ${LARRECO_DIR}/source/HitFinder. For this example, I picked
      # the one that's usually run first.

      HitLabel:        "gaushit"

      # The same for clusters:

      ClusterLabel:    "dbclusterdc"

      # In this example, which primary particle(s) we'll focus on in an event.
      # PDG code 13 = mu-.
      PDGcode:          13

      # dx used for the dE/dx calculation; units are cm. 
      BinSize:          0.3
   }
 }

 analyzeIt:  [ AnalysisExample, pmtresponse]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt,stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "reco_protoDUNE.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}
### Here, we overwrite ALL module labels with the ones defined above.
physics.producers.clustercheat.HitModuleLabel:         "hitcheat"
physics.producers.trackcheat.CheatedClusterLabel:      "clustercheat"
physics.producers.fasthitdc.ChanHitLabel:              "fasthit"
#physics.producers.hitfdcc.ChanHitLabel:               "gaushit"
#physics.producers.dcheatcc.ChanHitLabel:               "gaushit"
#physics.producers.fuzzydc.HitsModuleLabel:             "dcheat"
physics.producers.dbclusterdc.HitsModuleLabel:         "dcheat"
physics.producers.lineclusterdc.HitFinderModuleLabel:  "dcheat"
physics.producers.costrkdc.ClusterModuleLabel:         "lineclusterdc"
#physics.producers.stitchdc.TrackModuleLabel:           "costrkdc"
#physics.producers.stitchdc.SpptModuleLabel:            "costrkdc"
physics.producers.mctrutht0dc.TrackModuleLabel:        "costrkdc"
physics.producers.calodc.TrackModuleLabel:             "costrkdc"
physics.producers.calodc.SpacePointModuleLabel:        "costrkdc"
physics.producers.calodc.T0ModuleLabel:                "mctrutht0dc"

physics.producers.pmtrackdc.HitModuleLabel:             "lineclusterdc"
physics.producers.pmtrackdc.ClusterModuleLabel:         "lineclusterdc"
physics.producers.pmtrackcalo.TrackModuleLabel:         "pmtrack"
physics.producers.pmtrackcalo.SpacePointModuleLabel:    "pmtrack"
physics.producers.pmtrackcalo.T0ModuleLabel:            "mctrutht0pmtrack"
physics.producers.pmtrackcalodc.TrackModuleLabel:       "pmtrackdc"
physics.producers.pmtrackcalodc.SpacePointModuleLabel:  "pmtrackdc"
physics.producers.pmtrackcalodc.T0ModuleLabel:          "mctrutht0pmtrackdc"
physics.producers.mctrutht0pmtrack.TrackModuleLabel:    "pmtrack"
physics.producers.mctrutht0pmtrackdc.TrackModuleLabel:  "pmtrackdc"  

#physics.producers.fuzzy.HitsModuleLabel:               "hitfd"
physics.producers.dbcluster.HitsModuleLabel:           "hitfd"
physics.producers.linecluster.HitFinderModuleLabel:    "hitfd"
physics.producers.costrk.ClusterModuleLabel:           "linecluster"
#physics.producers.stitch.TrackModuleLabel:             "costrk"
#physics.producers.stitch.SpptModuleLabel:              "costrk"
physics.producers.mctrutht0.TrackModuleLabel:          "costrk"
physics.producers.calo.TrackModuleLabel:               "costrk"
physics.producers.calo.SpacePointModuleLabel:          "costrk"
physics.producers.calo.T0ModuleLabel:                  "mctrutht0"
#physics.producers.kalmanhit.HitModuleLabel:            "hitfd"
#physics.producers.kalmanhit.ClusterModuleLabel:        "fuzzy"

#Pandora configurations
physics.producers.pandoradc.HitFinderModuleLabel:           "dcheat"
physics.producers.particlestitcherdc.PFParticleModuleLabel: "pandoradc"
physics.producers.particlestitcherdc.TrackModuleLabel:      "pandoradc"
physics.producers.particlestitcherdc.UseXCoordinate:        false
physics.producers.mctrutht0pandoradc.TrackModuleLabel:      "particlestitcherdc"
physics.producers.pandoracalodc.TrackModuleLabel:           "particlestitcherdc"
physics.producers.pandoracalodc.SpacePointModuleLabel:      "pandoradc"
physics.producers.pandoracalodc.T0ModuleLabel:              "mctrutht0pandoradc"

physics.producers.pandora.HitFinderModuleLabel:             "hitfd"
physics.producers.particlestitcher.PFParticleModuleLabel:   "pandora"
physics.producers.particlestitcher.TrackModuleLabel:        "pandora"
physics.producers.particlestitcher.UseXCoordinate:          false
physics.producers.mctrutht0pandora.TrackModuleLabel:        "particlestitcher"
physics.producers.pandoracalo.TrackModuleLabel:             "particlestitcher"
physics.producers.pandoracalo.SpacePointModuleLabel:        "pandora"
physics.producers.pandoracalo.T0ModuleLabel:                "mctrutht0dcpandora"

#Optical detector configuration

#physics.producers.linecluster.ClusterCrawlerAlg.TimeDelta:    [2,3,3]
#physics.producers.lineclusterdc.ClusterCrawlerAlg.TimeDelta:    [2,3,3]
