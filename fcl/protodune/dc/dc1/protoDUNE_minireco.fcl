#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "featurelabelingmodules.fcl"
#include "opticaldetectormodules_dune.fcl"

#include "tools_dune.fcl"

process_name: pDUNEreco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "min_reco_protoDUNE_hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_data_services
}

services.Geometry.SortingParameters.ChannelsPerOpDet: 12

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: 30000
  fileNames: ["minreco_protoDUNE.root"]
}

source.inputCommands: ["keep *_*_*_*", "drop *_*_*_SinglesGen", "drop *_*_*_G4", "drop *_*_*_Reco" ]

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# convert raw::RawDigit to recob::wire
  caldata:            @local::producer_adcprep
# actual hit finder
  gaushit:            @local::dunefd_gaushitfinder
# actual disambiguation
  hitfd:              @local::dunefd_hitfinderfd
# event feature labeling
  emtrkmichelid:      @local::protodune_emtrkmichelid
  linecluster:        @local::dune35t_linecluster
  pmtrack:            @local::dunefd_pmalgtrackmaker
# photon detector reconstruction
  ophit:              @local::dune35t_ophit 
  opflash:            @local::dune35t_opflash
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ #optical hits and flashes
         ophit, opflash,
         #TPC wire signals      
         caldata,
         #hit reconstruction
         gaushit, 
         #real disambiguation
         hitfd,
         #cluster reco
         linecluster,
         #feature labeling
         emtrkmichelid,
         pmtrack
       ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}

outputs.out1.outputCommands: ["keep *_*_*_*", "drop *_*_*_Detsim" ]

### Here, we overwrite ALL module labels with the ones defined above.
physics.producers.linecluster.HitFinderModuleLabel:    "hitfd"

physics.producers.pmtrack.HitModuleLabel:                         "linecluster"
physics.producers.pmtrack.ClusterModuleLabel:                     "emtrkmichelid:emtrkmichel"
physics.producers.pmtrack.PMAlgTracking.TrackLikeThreshold:       0.63
physics.producers.pmtrack.PMAlgTracking.MinSeedSize2ndPass:       3
physics.producers.pmtrack.PMAlgTracking.Validation:               "adc"
physics.producers.pmtrack.PMAlgTracking.AdcValidationThr:         [0.8, 0.8, 1.0]
physics.producers.pmtrack.PMAlgTracking.RunVertexing:             true
physics.producers.pmtrack.PMAlgTracking.FlipToBeam:               true
physics.producers.pmtrack.PMAlgTracking.MatchT0inCPACrossing:     true
physics.producers.pmtrack.PMAlgCosmicTagging.TagOutOfDriftTracks: true
physics.producers.pmtrack.PMAlgCosmicTagging.TagFullHeightTracks: true
physics.producers.pmtrack.PMAlgCosmicTagging.TagNonBeamT0Tracks:  true

#Optical detector configuration
physics.producers.ophit.InputModule:                        "opdigi"
physics.producers.opflash.InputModule:                      "ophit"

