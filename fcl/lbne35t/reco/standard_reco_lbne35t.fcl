#include "services_lbne.fcl"
#include "caldata_lbne.fcl"
#include "hitfindermodules_lbne35t.fcl"
#include "cluster_lbne.fcl"
#include "trackfindermodules_lbne.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::lbne35t_services
}
#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  rns:                 { module_type: RandomNumberSaver }
# convert raw::RawDigit to recob::wire
  caldata:      @local::lbne35t_calwire	    
# cheater reconstruction
  hitcheat:     @local::lbne35t_hitcheater
  clustercheat: @local::lbne35t_clustercheater
  trackcheat:   @local::lbne35t_trackcheater
# actual hit finder
  gaushit:      @local::lbne35t_gaushitfinder
# disambiguation cheater that removes duplicate hits
  dcheat:       @local::standard_disambigcheat
# reconstruction using gaushit and disambiguration cheater
  clusterdc:    @local::lbne35t_fuzzycluster
  costrkdc:     @local::lbne35t_cosmictracker
  stitchdc:     @local::lbne35t_trackstitcher
# actual disambiguation
  hit35t:       @local::lbne35t_hitfinder35t
# reconstruction using disambiguated hits
  cluster:      @local::lbne35t_fuzzycluster
  costrk:       @local::lbne35t_cosmictracker
  stitch:       @local::lbne35t_trackstitcher

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns, caldata, hitcheat, clustercheat, trackcheat,
         gaushit, dcheat, clusterdc, costrkdc, stitchdc,
         hit35t, cluster, costrk, stitch]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_reco.root"
   dataTier:    "reconstructed"
   compressionLevel: 1
 }
}
### Here, we overwrite ALL module labels with the ones defined above.
physics.producers.clustercheat.HitModuleLabel:         "hitcheat"
physics.producers.trackcheat.CheatedClusterLabel:      "clustercheat"
physics.producers.clusterdc.HitsModuleLabel:           "dcheat"
physics.producers.costrkdc.ClusterModuleLabel:         "clusterdc"
physics.producers.costrkdc.CleanUpHits:                true
physics.producers.stitchdc.TrackModuleLabel:           "costrkdc"
physics.producers.stitchdc.SpptModuleLabel:            "costrkdc"
physics.producers.stitchdc.StitchAlg.SpptSepTolerance: 100
physics.producers.stitchdc.StitchAlg.CosAngTolerance:  0.80
physics.producers.cluster.HitsModuleLabel:             "hit35t"
physics.producers.costrk.ClusterModuleLabel:           "cluster"
physics.producers.costrk.CleanUpHits:                  true
physics.producers.stitch.TrackModuleLabel:             "costrk"
physics.producers.stitch.SpptModuleLabel:              "costrk"
physics.producers.stitch.StitchAlg.SpptSepTolerance:   100
physics.producers.stitch.StitchAlg.CosAngTolerance:    0.80
